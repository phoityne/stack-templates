{-# START_FILE package.yaml #-}
name: {{name}}
version: '0.0.1.0'
synopsis: Initial project template from stack
description: Please see README.md
category: Development
author: Author name here
maintainer: example@example.com
copyright: 2017 Author Here
license: BSD3
homepage: http://github.com/githubuser/{{name}}#readme
extra-source-files:
- README.md
- Changelog.md
ghc-options:
- -Wall
- -fno-warn-unused-do-bind
- -fno-warn-name-shadowing
dependencies:
- data-default
library:
  source-dirs: src
  exposed-modules:
  - {{paths-module}}
  - {{module}}.Control
  - {{module}}.Constant
  - {{module}}.Type
  - {{module}}.Utility
  dependencies:
  - base >=4.7 && <5
  - mtl
  - extensible
  - hslogger
  - text
  - bytestring
  - MissingH
  - conduit
  - conduit-extra
  - resourcet
  - lens
  - safe-exceptions
  - aeson
  - stache
executables:
  {{name}}:
    main: Main.hs
    source-dirs: app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - base
    - {{name}}
    - cmdargs
    - hslogger
    - MissingH
    - safe
    - lens
    - safe-exceptions
    - aeson
    - yaml
    - bytestring
tests:
  {{name}}-test:
    main: Spec.hs
    source-dirs: test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}
    - base
    - hspec
    - bytestring

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE LICENSE #-}
Copyright Author name here (c) 2015

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of Author name here nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


{-# START_FILE Changelog.md #-}

20XXMMDD {{name}}-0.0.1.0

  * [Info] Initial release.



{-# START_FILE README.md #-}

# {{name}}

Summary of {{name}}.


## Install


### Run stack install

    % stack install {{name}}
      . . . . .
    %


## Configuration

* config A
* config B


{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE test/{{module-path}}/ControlSpec.hs #-}
{-# LANGUAGE OverloadedStrings #-}

module {{module}}.ControlSpec where

import Test.Hspec
import Data.Default

import {{module}}.Control
import {{module}}.Type

spec :: Spec
spec = 
  describe "Control test" $ 
    context "with default" $ 
      it "should throw exception" $ do
        let arg  = ModeA "" Get
            conf = def
        run arg conf `shouldThrow` anyException




{-# START_FILE src/{{module-path}}/Utility.hs #-}

module {{module}}.Utility where

import System.IO
import qualified Data.ByteString as BS
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Text as T
import qualified Data.Text.Encoding as TE
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TLE
import qualified Data.Conduit.Binary as C
import qualified Data.Conduit as C
import qualified Data.Conduit.List as C

-- |
--
str2bs :: String -> BS.ByteString
str2bs = TE.encodeUtf8 . T.pack

-- |
--
bs2str :: BS.ByteString -> String
bs2str = T.unpack. TE.decodeUtf8

-- |
--
str2lbs :: String -> LBS.ByteString
str2lbs = TLE.encodeUtf8 . TL.pack

-- |
--
lbs2str :: LBS.ByteString -> String
lbs2str = TL.unpack. TLE.decodeUtf8


-- |
--  
-- 
loadFile :: FilePath -> IO BS.ByteString
loadFile path = do
  bs <- C.runConduitRes
      $ C.sourceFile path
      C..| C.consume
  return $ BS.concat bs


-- |
--  
-- 
saveFile :: FilePath -> BS.ByteString -> IO ()
saveFile path cont = saveFileLBS path $ LBS.fromStrict cont


-- |
--  
-- 
saveFileLBS :: FilePath -> LBS.ByteString -> IO ()
saveFileLBS path cont = C.runConduitRes
  $ C.sourceLbs cont
  C..| C.sinkFile path


-- |
--  
-- 
add2File :: FilePath -> BS.ByteString -> IO ()
add2File path cont = add2FileLBS path $ LBS.fromStrict cont

-- |
--  
-- 
add2FileLBS :: FilePath -> LBS.ByteString -> IO ()
add2FileLBS path cont = C.runConduitRes
  $ C.sourceLbs cont
  C..| C.sinkIOHandle hdl

  where hdl = openFile path AppendMode


-- |
--
rdrop :: Int -> [a] -> [a]
rdrop cnt = reverse . drop cnt . reverse

{-# START_FILE src/{{module-path}}/Type.hs #-}
{-# OPTIONS_GHC -fno-warn-orphans #-}
{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE TemplateHaskell    #-}
{-# LANGUAGE FlexibleContexts   #-}
{-# LANGUAGE TypeOperators      #-}
{-# LANGUAGE DataKinds          #-}
{-# LANGUAGE Rank2Types         #-}


module {{module}}.Type where

import {{paths-module}} (version)
import Data.Version (showVersion)
import Data.Data
import Data.Default
import Control.Lens
import Control.Concurrent
import Data.Aeson
import Data.Aeson.TH
import qualified Data.Text as T
import qualified Control.Exception.Safe as E
import qualified System.Log.Logger as L

import qualified Data.Extensible as EX
import qualified Data.Extensible.Effect.Default as EX

import {{module}}.Utility

--------------------------------------------------------------------------------
-- | Command Line Argument Data Type

-- |
--  Help Exception
--
data HelpExitException = HelpExitException
                       deriving (Show, Typeable)

instance E.Exception HelpExitException


-- |
--  enum type example data.
--
data Method = Get | Post | Put | Delete
              deriving (Data, Typeable, Show, Read, Eq)


-- |
--  Command Line Argument Data
--    Ex. Using Mode
--
data ArgData = ModeA
             {
               _yamlFileArgData :: FilePath
             , _methodArgData  :: Method
             }
             | ModeB
             {
               _yamlFileArgData :: FilePath
             , _valueArgData   :: Int
             } deriving (Data, Typeable, Show, Read, Eq)

makeLenses ''ArgData


--------------------------------------------------------------------------------
instance FromJSON  L.Priority  where
  parseJSON (String v) = pure $ read $ T.unpack v
  parseJSON o = error $ "json parse error. Priority:" ++ show o

instance ToJSON  L.Priority  where
  toJSON (L.DEBUG)     = String $ T.pack "DEBUG"
  toJSON (L.INFO)      = String $ T.pack "INFO"
  toJSON (L.NOTICE)    = String $ T.pack "NOTICE"
  toJSON (L.WARNING)   = String $ T.pack "WARNING"
  toJSON (L.ERROR)     = String $ T.pack "ERROR"
  toJSON (L.CRITICAL)  = String $ T.pack "CRITICAL"
  toJSON (L.ALERT)     = String $ T.pack "ALERT"
  toJSON (L.EMERGENCY) = String $ T.pack "EMERGENCY"
  
--------------------------------------------------------------------------------
-- | Config Data
-- 
data ConfigData = ConfigData {
    _workDirConfigData  :: FilePath
  , _logFileConfigData  :: FilePath
  , _logLevelConfigData :: L.Priority
  } deriving (Show, Read, Eq)

makeLenses ''ConfigData

instance Default ConfigData where
  def = ConfigData {
        _workDirConfigData  = "."
      , _logFileConfigData  = "{{name}}.log" 
      , _logLevelConfigData = L.WARNING
      }

$(deriveJSON defaultOptions { fieldLabelModifier = tail . (rdrop (length "ConfigData")) } ''ConfigData)


--------------------------------------------------------------------------------
-- | Application Context EFF Type
-- 
type AppContext r = EX.Eff '[  "args"  EX.>: EX.ReaderEff ArgData
                             , "conf"  EX.>: EX.ReaderEff ConfigData
                             -- , "state" EX.>: EX.State (MVar AppData)
                             , EX.StateDef (MVar AppData)
                             , "io"    EX.>: IO
                             ] r

                       
-- | Application Context Data
-- 
data AppData = AppData {
    _appNameAppData     :: String
  , _appVerAppData      :: String
  , _appFullNameAppData :: String
  , _modifiedAppData    :: Bool
  } deriving (Show, Read, Eq)

makeLenses ''AppData

instance Default AppData where
  def = AppData {
        _appNameAppData     = "{{name}}"
      , _appVerAppData      = showVersion version
      , _appFullNameAppData = ""
      , _modifiedAppData    = False
      }

{-# START_FILE src/{{module-path}}/Constant.hs #-}

module {{module}}.Constant where

-- |
--
_INI_SEC_DEF :: String
_INI_SEC_DEF = "DEFAULT"

-- |
--
_INI_DEF_WORK_DIR :: String
_INI_DEF_WORK_DIR  = "work_dir"

-- |
--
_INI_SEC_LOG :: String
_INI_SEC_LOG   = "LOG"

-- |
--
_INI_LOG_FILE :: String
_INI_LOG_FILE  = "file"

-- |
--
_INI_LOG_LEVEL :: String
_INI_LOG_LEVEL = "level"

-- |
--
_LOG_NAME :: String
_LOG_NAME = "{{name}}"

-- |
--
_LOG_FORMAT :: String
_LOG_FORMAT = "$time [$pid($tid)] $prio $loggername - $msg"

-- |
--
_LOG_FORMAT_DATE :: String
_LOG_FORMAT_DATE = "%Y-%m-%d %H:%M:%S.%q"


{-# START_FILE src/{{module-path}}/Control.hs #-}
{-# LANGUAGE GADTs               #-}
{-# LANGUAGE LambdaCase          #-}
{-# LANGUAGE MultiWayIf          #-}
{-# LANGUAGE BinaryLiterals      #-}
{-# LANGUAGE OverloadedStrings   #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE FlexibleContexts    #-}
{-# LANGUAGE DataKinds           #-}
{-# LANGUAGE OverloadedLabels    #-}
{-# LANGUAGE TypeApplications    #-}
{-# LANGUAGE TypeOperators       #-}

module {{module}}.Control where

import Control.Concurrent
import Data.Default
import Control.Lens hiding ((.=))
import Text.Mustache
import Data.Aeson
import qualified Control.Exception.Safe as E
import qualified System.Log.Logger as L
import qualified Data.Text.Lazy as T

import Control.Monad.State.Class

import qualified Data.Extensible.Effect as EX
import qualified Data.Extensible.Effect.Default as EX

import {{module}}.Constant
import {{module}}.Type


-- |
--  Logic Main
-- 
run :: ArgData -> ConfigData -> IO Int
run args conf = do
  appData <- newMVar def
  
  initAppData args conf appData

  (code, _) <- EX.retractEff
             -- $ flip EX.runStateEff appData
             $ flip EX.runStateDef appData
             $ flip EX.runReaderEff conf
             $ flip EX.runReaderEff args runApp
                
  return code


-- |
--  Application
-- 
runApp :: AppContext Int
runApp = do

  args     <- EX.askEff #args
  -- appData  <- EX.getEff #state >>= EX.liftEff #io.readMVar
  appDataMVar <- get
  appData  <- liftIO $ readMVar appDataMVar
  logLevel <- getLogLevel

  let res = render appData args logLevel
  liftIO $ L.errorM _LOG_NAME res
   
  liftIO $ E.throwIO . userError $ "not yet implemented."
 
  where
    tpl = "Mustache template. {{level}}"
     
    render :: AppData -> ArgData -> String -> String
    render dat args logLv =
      T.unpack $ withTpl (compileMustacheText "sample" tpl)
               $ object [
                 "name"  .= (dat^.appFullNameAppData)
               , "args"  .= show args
               , "level" .= logLv
               ]
 
    withTpl (Right t) ctx = withTxt $ renderMustacheW  t ctx
    withTpl (Left  e)   _ = error $ show e 
 
    withTxt ([], t) = t
    withTxt (xs, _) = error $ show xs

-- |
--  Sub Application
-- 
getLogLevel :: AppContext String
getLogLevel = do
  conf <- EX.askEff #conf
  return $ show (conf ^. logLevelConfigData)


-- |
--  Initialize Application Context Data
-- 
initAppData :: ArgData -> ConfigData -> MVar AppData -> IO ()
initAppData _ _ datM = do
  dat <- takeMVar datM
  let fullName = (dat ^. appNameAppData) ++ "-" ++ view appVerAppData dat

  putMVar datM $ set modifiedAppData True
               $ dat & appFullNameAppData .~ fullName

               
-- |
--  utility
-- 
liftIO :: IO a -> AppContext a
liftIO = EX.liftEff #io



{-# START_FILE app/Main.hs #-}
{-# LANGUAGE LambdaCase          #-}
{-# LANGUAGE ScopedTypeVariables #-}

module Main where

import qualified {{module}}.Main as M
import System.Exit


-- |
--  Main
--
main :: IO ()
main = M.run >>= \case
  0 -> exitSuccess
  c -> exitWith . ExitFailure $ c



{-# START_FILE app/{{module-path}}/Main.hs #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE MultiWayIf          #-}

module {{module}}.Main (run) where

import {{module}}.Constant
import {{module}}.Type
import {{module}}.Config
import qualified {{module}}.Argument as A
import qualified {{module}}.Control as CTRL

import System.IO
import Control.Lens
import qualified Control.Exception.Safe as E
import qualified System.Console.CmdArgs as CMD
import qualified System.Log.Logger as L
import qualified System.Log.Formatter as L
import qualified System.Log.Handler as LH
import qualified System.Log.Handler.Simple as LHS


-- |
--  Application Main
-- 
run :: IO Int
run = flip E.catches handlers $ do

  -- get command line arguments
  args <- getArgs

  -- load config setting
  conf <- getConfigData args

  -- setup logger
  setupLogger conf

  -- run logic main
  flip E.finally finalProc $ CTRL.run args conf

  where
    handlers = [ E.Handler helpExcept
               , E.Handler ioExcept
               , E.Handler someExcept
               ]
    finalProc = L.removeAllHandlers 
    helpExcept (_ :: HelpExitException) = return 0
    ioExcept   (e :: E.IOException)     = putStrLn (criticalMsg e) >> return 1
    someExcept (e :: E.SomeException)   = putStrLn (criticalMsg e) >> return 1

    criticalMsg e = unlines [
        ""
      , "[CRITICAL] unexpected error. exit 1."
      , "--------------------------------------------------------------------------------"
      , show e
      , "--------------------------------------------------------------------------------"
      ]


-- |
--  get command line arguments
-- 
getArgs :: IO ArgData
getArgs = E.catches (CMD.cmdArgs A.getArgData) handlers
  where
    handlers = [E.Handler someExcept]
    someExcept (e :: E.SomeException)
      | "ExitSuccess" == show e = E.throw HelpExitException
      | otherwise = E.throwIO e

-- |
--  setup logger
-- 
setupLogger :: ConfigData -> IO ()
setupLogger conf = do

  logStream <- openFile (conf^.logFileConfigData) AppendMode
  hSetEncoding logStream utf8

  logH <- LHS.streamHandler logStream (conf^.logLevelConfigData)
  
  let logHandle  = logH {LHS.closeFunc = hClose}
      logFormat  = L.tfLogFormatter _LOG_FORMAT_DATE _LOG_FORMAT
      logHandler = LH.setFormatter logHandle logFormat

  L.updateGlobalLogger L.rootLoggerName $ L.setHandlers ([] :: [LHS.GenericHandler Handle])
  L.updateGlobalLogger _LOG_NAME $ L.setHandlers [logHandler]
  L.updateGlobalLogger _LOG_NAME $ L.setLevel (conf^.logLevelConfigData)


{-# START_FILE app/{{module-path}}/Config.hs #-}
{-# LANGUAGE OverloadedStrings   #-}
{-# LANGUAGE LambdaCase          #-}

module {{module}}.Config (
  getConfigData
) where

import {{module}}.Type
import {{module}}.Argument
import {{module}}.Utility

import Control.Lens
import Data.Yaml

-- |
-- 
--
getConfigData :: ArgData -> IO ConfigData
getConfigData args = decodeEither' <$> getContent (args^.yamlFileArgData) >>= \case 
    Left  e -> error $ "invalid config file. [" ++ show e ++ "]"
    Right v -> return v

  where
    getContent f
      | null f    = return $ defaultYamlSetting
      | otherwise = loadFile f
  

{-# START_FILE app/{{module-path}}/Argument.hs #-}
{-# LANGUAGE OverloadedStrings   #-}
{-# OPTIONS_GHC -fno-cse         #-}

module {{module}}.Argument (
  getArgData
, defaultYamlSetting
) where

import {{paths-module}} (version)
import Data.Version (showVersion)
import System.Console.CmdArgs
import qualified Data.ByteString as BS

import {{module}}.Type
import {{module}}.Utility

-- |
--  Annotation Setting
--
getArgData :: ArgData
getArgData = modes [confA, confB]
         &= summary sumMsg
         &= program "{{name}}"
         
  where
    confA = ModeA {
            _yamlFileArgData = def
             &= name "c"
             &= name "config"
             &= explicit
             &= typFile
             &= help "config file"
          , _methodArgData = enum
                   [
                     Get
                       &= name "get"
                       &= explicit
                       &= help "method type Get"
                   , Post
                       &= name "post"
                       &= explicit
                       &= help "  | type Post"
                   , Put
                       &= name "put"
                       &= explicit
                       &= help "  | type Put"
                   , Delete
                       &= name "delete"
                       &= explicit
                       &= help "  | type Delete"
                   ]
          } &= name "ModeA"
            &= details mdAMsg
            &= auto
    confB = ModeB {
            _yamlFileArgData = def
             &= name "i"
             &= name "ini"
             &= explicit
             &= typFile
             &= help "ini file"
          , _valueArgData = def
             &= name "value"
             &= explicit
             &= help "integer value"
          } &= name "ModeB"
            &= details mdBMsg

    sumMsg = unlines [
             ""
           , "VERSION: {{name}}-" ++ showVersion version
           , ""
           ]
           
    mdAMsg = [
             ""
           , "  DESCRIPTION: ModeA"
           , ""
           , "     Please see README.md"
           , ""
           ]

    mdBMsg = [
             ""
           , "  DESCRIPTION: ModeB"
           , ""
           , "     Please see README.md"
           , ""
           ]

-- |
--  default ini setting
-- 
defaultYamlSetting :: BS.ByteString
defaultYamlSetting = str2bs $ unlines [
    "workDir  : \".\""
  , "logFile  : \"{{name}}.log\""
  , "logLevel : \"WARNING\""
  ]

