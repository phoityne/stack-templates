{-# START_FILE package.yaml #-}
name: {{name}}
version: '0.0.1.0'
synopsis: Initial project template from stack
description: Please see README.md
category: Development
author: Author name here
maintainer: example@example.com
copyright: 2019 Author Here
license: BSD3
homepage: http://github.com/githubuser/{{name}}#readme

extra-source-files:
- README.md
- Changelog.md

ghc-options:
- -Wall
- -threaded
- -rtsopts
- -with-rtsopts=-N
- -fno-warn-unused-do-bind
- -fno-warn-name-shadowing
- -fno-warn-orphans
- -Wcompat
- -Wincomplete-record-updates
- -Wincomplete-uni-patterns
- -Wredundant-constraints

default-extensions:
- AutoDeriveTypeable
- BangPatterns
- BinaryLiterals
- ConstraintKinds
- DataKinds
- DefaultSignatures
- DeriveDataTypeable
- DeriveFoldable
- DeriveFunctor
- DeriveGeneric
- DeriveTraversable
- DoAndIfThenElse
- EmptyDataDecls
- ExistentialQuantification
- FlexibleContexts
- FlexibleInstances
- FunctionalDependencies
- GADTs
- GeneralizedNewtypeDeriving
- InstanceSigs
- KindSignatures
- LambdaCase
- MonadFailDesugaring
- MultiParamTypeClasses
- MultiWayIf
- NamedFieldPuns
- OverloadedLabels
- PartialTypeSignatures
- PatternGuards
- PolyKinds
- RankNTypes
- RecordWildCards
- ScopedTypeVariables
- StandaloneDeriving
- TupleSections
- TypeFamilies
- TypeOperators
- TypeSynonymInstances
- ViewPatterns

dependencies:
- base >=4.7 && <5
- mtl
- MissingH
- conduit
- conduit-extra
- resourcet
- lens
- aeson
- stache
- text
- bytestring
- safe-exceptions
- data-default
- hslogger
- safe
- yaml
- cmdargs
- process

library:
  source-dirs: src
  exposed-modules:
  - {{paths-module}}
  - {{module}}.Constant
  - {{module}}.Control
  - {{module}}.Logger
  - {{module}}.Type
  - {{module}}.Utility
  - {{module}}.TH.Utility

executables:
  {{name}}:
    main: Main.hs
    source-dirs: app
    dependencies:
    - {{name}}

tests:
  {{name}}-test:
    main: Spec.hs
    source-dirs: test
    dependencies:
    - hspec
    - {{name}}


{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE LICENSE #-}
Copyright Author name here (c) 2015

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of Author name here nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


{-# START_FILE README.md #-}

# {{name}}

Summary of {{name}}.


## Install


### Run stack install

    % stack install {{name}}
      . . . . .
    %


## Configuration

* config A
* config B


{-# START_FILE Changelog.md #-}

20XXMMDD {{name}}-0.0.1.0

  * [Info] Initial release.



{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE test/Spec/Utility.hs #-}

module Spec.Utility where

import qualified System.IO as S
import qualified System.Process as S
import qualified Data.ByteString.Lazy as B
import Control.Concurrent.MVar
import qualified System.Log.Logger as L
import qualified System.Log.Formatter as L
import qualified System.Log.Handler as LH
import qualified System.Log.Handler.Simple as LHS

import {{module}}.Constant
import {{module}}.Utility


-- |
--  setup logger
-- 
setUpLogger :: L.Priority -> IO ()
setUpLogger p = do
  logHandle <- LHS.streamHandler S.stdout p
  
  let logFormat  = L.tfLogFormatter _LOG_FORMAT_DATE _LOG_FORMAT
      logHandler = LH.setFormatter logHandle logFormat

  L.updateGlobalLogger L.rootLoggerName $ L.setHandlers ([] :: [LHS.GenericHandler S.Handle])
  L.updateGlobalLogger _LOG_NAME $ L.setHandlers [logHandler]
  L.updateGlobalLogger _LOG_NAME $ L.setLevel p


-- |
--  setup logger
-- 
tearDownLogger :: IO ()
tearDownLogger = do
  L.removeAllHandlers


-- |
--
createPipe :: IO (S.Handle, S.Handle)
createPipe = do
  (rHdl, wHdl) <- S.createPipe

  S.hSetBuffering rHdl S.NoBuffering
  S.hSetEncoding rHdl S.utf8
  S.hSetNewlineMode rHdl $ S.NewlineMode S.CRLF S.LF

  S.hSetBuffering wHdl S.NoBuffering
  S.hSetEncoding wHdl S.utf8
  S.hSetNewlineMode wHdl $ S.NewlineMode S.CRLF S.LF

  return (rHdl, wHdl) 


-- |
--
read2buf :: S.Handle -> MVar B.ByteString -> IO ()
read2buf hdl bufMVar = do
  s <- B.hGet hdl 1
  buf <- takeMVar bufMVar
  putMVar bufMVar $ buf `B.append` s
  read2buf hdl bufMVar

{-# START_FILE test/{{module-path}}/ControlSpec.hs #-}
{-# LANGUAGE OverloadedStrings #-}

module {{module}}.ControlSpec where

import Test.Hspec
import Data.Default
import qualified System.Log.Logger as L

import Spec.Utility

import {{module}}.Constant
import {{module}}.Type
import {{module}}.Control

-- |
--
spec :: Spec
spec = do
  runIO $ putStrLn "Start Spec."
  beforeAll_ beforeAll'
    . afterAll_ afterAll'
    . before_ before'
    . after_  after'
    $ spec'

  where
    beforeAll' :: IO ()
    beforeAll' = do
      setUpLogger L.DEBUG
      return ()

    afterAll' ::IO ()
    afterAll' = do
      tearDownLogger
      return ()
      
    before' :: IO ()
    before' = do
      return ()

    after' :: IO ()
    after' = do
      return ()

    spec' :: Spec
    spec' = do
      describe "run" $ do
        context "when default args" $ 
          it "should be 1" $ do
            let arg  = def
                conf = def
            res <- run arg conf
            res `shouldBe` 1

        context "when args" $ 
          it "should throw exception" $ do
            let arg  = def
                conf = def
            run arg conf `shouldThrow` anyException


{-# START_FILE src/{{module-path}}/TH/Utility.hs #-}

module {{module}}.TH.Utility where


-- |
--
rdrop :: Int -> [a] -> [a]
rdrop cnt = reverse . drop cnt . reverse

-- |
--
fieldModifier :: String -> String -> String
fieldModifier str  = tail . rdrop (length str)

{-# START_FILE src/{{module-path}}/Utility.hs #-}
module {{module}}.Utility where

import System.IO
import qualified Data.ByteString as BS
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Text as T
import qualified Data.Text.Encoding as TE
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TLE
import qualified Data.Conduit.Binary as C
import qualified Data.Conduit as C
import qualified Data.Conduit.List as C

import {{module}}.Type

-- |
--
str2bs :: String -> BS.ByteString
str2bs = TE.encodeUtf8 . T.pack

-- |
--
bs2str :: BS.ByteString -> String
bs2str = T.unpack. TE.decodeUtf8

-- |
--
str2lbs :: String -> LBS.ByteString
str2lbs = TLE.encodeUtf8 . TL.pack

-- |
--
lbs2str :: LBS.ByteString -> String
lbs2str = TL.unpack. TLE.decodeUtf8


-- |
--  
-- 
loadFile :: FilePath -> IO BS.ByteString
loadFile path = do
  bs <- C.runConduitRes
      $ C.sourceFile path
      C..| C.consume
  return $ BS.concat bs


-- |
--  
-- 
saveFile :: FilePath -> BS.ByteString -> IO ()
saveFile path cont = saveFileLBS path $ LBS.fromStrict cont


-- |
--  
-- 
saveFileLBS :: FilePath -> LBS.ByteString -> IO ()
saveFileLBS path cont = C.runConduitRes
  $ C.sourceLbs cont
  C..| C.sinkFile path


-- |
--  
-- 
add2File :: FilePath -> BS.ByteString -> IO ()
add2File path cont = add2FileLBS path $ LBS.fromStrict cont

-- |
--  
-- 
add2FileLBS :: FilePath -> LBS.ByteString -> IO ()
add2FileLBS path cont = C.runConduitRes
  $ C.sourceLbs cont
  C..| C.sinkIOHandle hdl

  where hdl = openFile path AppendMode

           
-- |
--  utility
-- 
showEE :: (Show e) => Either e a -> Either ErrMsg a
showEE (Right v) = Right v
showEE (Left  e) = Left $ show e


{-# START_FILE src/{{module-path}}/Type.hs #-}
{-# LANGUAGE TemplateHaskell #-}

module {{module}}.Type where


import Data.Data
import Data.Default
import Control.Lens
import Data.Aeson
import Data.Aeson.TH
import Control.Monad.Except
import Control.Monad.State
import Control.Concurrent
import qualified Data.Text as T
import qualified System.Log.Logger as L

import {{module}}.TH.Utility

--------------------------------------------------------------------------------
-- | Command Line Argument Data Type
--
data ArgData = ArgData {
    _yamlFileArgData :: Maybe FilePath
  } deriving (Data, Typeable, Show, Read, Eq)

makeLenses ''ArgData
$(deriveJSON
  defaultOptions {
      fieldLabelModifier = fieldModifier "ArgData"
    }
  ''ArgData)

instance Default ArgData where
  def = ArgData {
        _yamlFileArgData = Nothing
      }

--------------------------------------------------------------------------------
instance FromJSON  L.Priority  where
  parseJSON (String v) = pure $ read $ T.unpack v
  parseJSON o = error $ "json parse error. Priority:" ++ show o

instance ToJSON  L.Priority  where
  toJSON (L.DEBUG)     = String $ T.pack "DEBUG"
  toJSON (L.INFO)      = String $ T.pack "INFO"
  toJSON (L.NOTICE)    = String $ T.pack "NOTICE"
  toJSON (L.WARNING)   = String $ T.pack "WARNING"
  toJSON (L.ERROR)     = String $ T.pack "ERROR"
  toJSON (L.CRITICAL)  = String $ T.pack "CRITICAL"
  toJSON (L.ALERT)     = String $ T.pack "ALERT"
  toJSON (L.EMERGENCY) = String $ T.pack "EMERGENCY"
  
--------------------------------------------------------------------------------
-- | Config Data
-- 
data ConfigData = ConfigData {
    _workDirConfigData  :: FilePath
  , _logFileConfigData  :: FilePath
  , _logLevelConfigData :: L.Priority
  } deriving (Show, Read, Eq)

makeLenses ''ConfigData

instance Default ConfigData where
  def = ConfigData {
        _workDirConfigData  = "."
      , _logFileConfigData  = "{{name}}.log" 
      , _logLevelConfigData = L.WARNING
      }

$(deriveJSON defaultOptions { fieldLabelModifier = tail . (rdrop (length "ConfigData")) } ''ConfigData)


--------------------------------------------------------------------------------
-- | Application Context
-- 
                      
type ErrMsg = String
type AppContext = StateT AppData (ExceptT ErrMsg IO) 


-- | Application Context Data
-- 
data AppData = AppData {
    _appNameAppData     :: String
  , _appVerAppData      :: String
  , _appFullNameAppData :: String
  , _modifiedAppData    :: MVar Bool
  } 

makeLenses ''AppData

{-
instance Default AppData where
  def = AppData {
        _appNameAppData     = "{{name}}"
      , _appVerAppData      = showVersion version
      , _appFullNameAppData = ""
      , _modifiedAppData    = False
      }
      -}

{-# START_FILE src/{{module-path}}/Logger.hs #-}
module {{module}}.Logger where

import {{module}}.Constant
import {{module}}.Type

import System.IO
import Control.Lens
import qualified System.Log.Logger as L
import qualified System.Log.Formatter as L
import qualified System.Log.Handler as LH
import qualified System.Log.Handler.Simple as LHS


-- |
--  setup logger
-- 
setupLogger :: ConfigData -> IO ()
setupLogger conf = do

  logStream <- openFile (conf^.logFileConfigData) AppendMode
  hSetEncoding logStream utf8

  logH <- LHS.streamHandler logStream (conf^.logLevelConfigData)
  
  let logHandle  = logH {LHS.closeFunc = hClose}
      logFormat  = L.tfLogFormatter _LOG_FORMAT_DATE _LOG_FORMAT
      logHandler = LH.setFormatter logHandle logFormat

  L.updateGlobalLogger L.rootLoggerName $ L.setHandlers ([] :: [LHS.GenericHandler Handle])
  L.updateGlobalLogger _LOG_NAME $ L.setHandlers [logHandler]
  L.updateGlobalLogger _LOG_NAME $ L.setLevel (conf^.logLevelConfigData)


{-# START_FILE src/{{module-path}}/Control.hs #-}
{-# LANGUAGE OverloadedStrings   #-}

module {{module}}.Control where

import {{paths-module}} (version)
import Data.Version (showVersion)
import Control.Concurrent
import Control.Lens hiding ((.=))
import Text.Mustache
import Data.Aeson
import qualified System.Log.Logger as L
import Control.Monad.Except
import Control.Monad.State.Lazy
import qualified Control.Exception.Safe as E

import {{module}}.Constant
import {{module}}.Type
import {{module}}.Utility
import {{module}}.Logger


-- |
-- 
run :: ArgData -> ConfigData -> IO Int
run _ conf = E.bracket initialize finalize go

  where
    -- |
    -- 
    initialize = do
      L.debugM _LOG_NAME $ "initialize called."
      setupLogger conf

      modified <- newMVar False
      return $ AppData {
        _appNameAppData     = "{{name}}"
      , _appVerAppData      = showVersion version
      , _appFullNameAppData = ""
      , _modifiedAppData    = modified
      }

    -- |
    --
    finalize _ = do
      L.debugM _LOG_NAME $ "finalize called."
      L.removeAllHandlers

    -- |
    -- 
    go appData = do
      let runner = runExceptT . flip runStateT appData
      runner app >>= \case
        Left err -> do
          L.errorM _LOG_NAME err
          E.throwIO $ userError err
          return 1     
        Right (res, _) -> do
          L.infoM _LOG_NAME $ show res
          return 0


-- |
--  Application
-- 
app :: AppContext ()
app = do
  renderMustacheW <$> compile <*> context >>= \case
    ([], t) -> liftIO $ L.infoM _LOG_NAME  $ show t
    (xs, _) -> liftIO $ L.errorM _LOG_NAME $ show xs

  throwError "not yet implemented." 
 
  where

    tpl = "Mustache template. {{name}}"
     
    compile :: AppContext Template
    compile = liftEither $ showEE $ compileMustacheText "sample" tpl

    context :: AppContext Value
    context = do
      appData <- get
       
      return $ object [
               "name"  .= (appData^.appFullNameAppData)
             ]

{-# START_FILE src/{{module-path}}/Constant.hs #-}

module {{module}}.Constant where

-- |
--
_INI_SEC_DEF :: String
_INI_SEC_DEF = "DEFAULT"

-- |
--
_INI_DEF_WORK_DIR :: String
_INI_DEF_WORK_DIR  = "work_dir"

-- |
--
_INI_SEC_LOG :: String
_INI_SEC_LOG   = "LOG"

-- |
--
_INI_LOG_FILE :: String
_INI_LOG_FILE  = "file"

-- |
--
_INI_LOG_LEVEL :: String
_INI_LOG_LEVEL = "level"

-- |
--
_LOG_NAME :: String
_LOG_NAME = "{{name}}"

-- |
--
_LOG_FORMAT :: String
_LOG_FORMAT = "$time [$pid($tid)] $prio $loggername - $msg"

-- |
--
_LOG_FORMAT_DATE :: String
_LOG_FORMAT_DATE = "%Y-%m-%d %H:%M:%S.%q"


{-# START_FILE app/Main.hs #-}
module Main where

import System.Exit
import qualified {{module}}.Main as M

import qualified {{module}}.Argument as A
import qualified System.Console.CmdArgs as CMD

-- |
--  Main
--
main :: IO ()
main = CMD.cmdArgs A.setting >>= M.run >>= \case
  0 -> exitSuccess
  c -> exitWith . ExitFailure $ c



{-# START_FILE app/{{module-path}}/Main.hs #-}
module {{module}}.Main (run) where

import {{module}}.Type
import {{module}}.Config
import qualified {{module}}.Control as CTRL

import qualified Control.Exception.Safe as E


-- |
--  Application Main
-- 
run :: ArgData -> IO Int
run args = flip E.catchAny ehdl $ do

  -- load config setting
  conf <- getConfigData args

  -- run logic main
  flip E.finally finalize $ CTRL.run args conf

  where
    finalize = return () 
    ehdl e   = putStrLn (criticalMsg e) >> return 1

    criticalMsg e = unlines [
        ""
      , "[CRITICAL] unexpected error. exit 1."
      , "--------------------------------------------------------------------------------"
      , show e
      , "--------------------------------------------------------------------------------"
      ]


{-# START_FILE app/{{module-path}}/Config.hs #-}
{-# LANGUAGE OverloadedStrings #-}

module {{module}}.Config (
  getConfigData
) where

import {{module}}.Type
import {{module}}.Utility

import Control.Lens
import Data.Yaml
import qualified Data.ByteString as BS

-- |
-- 
--
getConfigData :: ArgData -> IO ConfigData
getConfigData args = decodeEither' <$> getContent (args^.yamlFileArgData) >>= \case 
    Left  e -> error $ "invalid config file. [" ++ show e ++ "]"
    Right v -> return v

  where
    getContent Nothing  = return $ defaultYamlSetting
    getContent (Just f) = loadFile f
  
-- |
--  default ini setting
-- 
defaultYamlSetting :: BS.ByteString
defaultYamlSetting = str2bs $ unlines [
    "workDir  : \".\""
  , "logFile  : \"{{name}}.log\""
  , "logLevel : \"WARNING\""
  ]


{-# START_FILE app/{{module-path}}/Argument.hs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-cse #-}

module {{module}}.Argument (
  setting
) where

import {{paths-module}} (version)
import Data.Version (showVersion)
import System.Console.CmdArgs

import {{module}}.Type

-- |
--  Annotation Setting
--
setting :: ArgData
setting = modes [mode]
  &= summary summaryMsg
  &= program "{{name}}"
         
  where
    mode = ArgData {
        _yamlFileArgData = def
          &= name "i"
          &= name "ini"
          &= explicit
          &= typFile
          &= help "setting yaml file"
      } &= name "Mode"
        &= details detailMsg
        &= auto

    summaryMsg = unlines [
        ""
      , "VERSION: {{name}}-" ++ showVersion version
      , ""
      ]
           
    detailMsg = [
        ""
      , "  DESCRIPTION: ... "
      , ""
      , "     Please see README.md"
      , ""
      ]


